<?php

namespace Proxies\__CG__\Remmy\BackOfficeBundle\Entity\backup;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class UserOrder extends \Remmy\BackOfficeBundle\Entity\backup\UserOrder implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'Remmy\\BackOfficeBundle\\Entity\\backup\\UserOrder' . "\0" . 'idorder', '' . "\0" . 'Remmy\\BackOfficeBundle\\Entity\\backup\\UserOrder' . "\0" . 'datestart', '' . "\0" . 'Remmy\\BackOfficeBundle\\Entity\\backup\\UserOrder' . "\0" . 'datestop', '' . "\0" . 'Remmy\\BackOfficeBundle\\Entity\\backup\\UserOrder' . "\0" . 'statut', '' . "\0" . 'Remmy\\BackOfficeBundle\\Entity\\backup\\UserOrder' . "\0" . 'quantitytotal', '' . "\0" . 'Remmy\\BackOfficeBundle\\Entity\\backup\\UserOrder' . "\0" . 'totalamount', '' . "\0" . 'Remmy\\BackOfficeBundle\\Entity\\backup\\UserOrder' . "\0" . 'taxes', '' . "\0" . 'Remmy\\BackOfficeBundle\\Entity\\backup\\UserOrder' . "\0" . 'iduser'];
        }

        return ['__isInitialized__', '' . "\0" . 'Remmy\\BackOfficeBundle\\Entity\\backup\\UserOrder' . "\0" . 'idorder', '' . "\0" . 'Remmy\\BackOfficeBundle\\Entity\\backup\\UserOrder' . "\0" . 'datestart', '' . "\0" . 'Remmy\\BackOfficeBundle\\Entity\\backup\\UserOrder' . "\0" . 'datestop', '' . "\0" . 'Remmy\\BackOfficeBundle\\Entity\\backup\\UserOrder' . "\0" . 'statut', '' . "\0" . 'Remmy\\BackOfficeBundle\\Entity\\backup\\UserOrder' . "\0" . 'quantitytotal', '' . "\0" . 'Remmy\\BackOfficeBundle\\Entity\\backup\\UserOrder' . "\0" . 'totalamount', '' . "\0" . 'Remmy\\BackOfficeBundle\\Entity\\backup\\UserOrder' . "\0" . 'taxes', '' . "\0" . 'Remmy\\BackOfficeBundle\\Entity\\backup\\UserOrder' . "\0" . 'iduser'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (UserOrder $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function setDatestart($datestart)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDatestart', [$datestart]);

        return parent::setDatestart($datestart);
    }

    /**
     * {@inheritDoc}
     */
    public function getDatestart()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDatestart', []);

        return parent::getDatestart();
    }

    /**
     * {@inheritDoc}
     */
    public function setDatestop($datestop)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDatestop', [$datestop]);

        return parent::setDatestop($datestop);
    }

    /**
     * {@inheritDoc}
     */
    public function getDatestop()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDatestop', []);

        return parent::getDatestop();
    }

    /**
     * {@inheritDoc}
     */
    public function setStatut($statut)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStatut', [$statut]);

        return parent::setStatut($statut);
    }

    /**
     * {@inheritDoc}
     */
    public function getStatut()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStatut', []);

        return parent::getStatut();
    }

    /**
     * {@inheritDoc}
     */
    public function setQuantitytotal($quantitytotal)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setQuantitytotal', [$quantitytotal]);

        return parent::setQuantitytotal($quantitytotal);
    }

    /**
     * {@inheritDoc}
     */
    public function getQuantitytotal()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getQuantitytotal', []);

        return parent::getQuantitytotal();
    }

    /**
     * {@inheritDoc}
     */
    public function setTotalamount($totalamount)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTotalamount', [$totalamount]);

        return parent::setTotalamount($totalamount);
    }

    /**
     * {@inheritDoc}
     */
    public function getTotalamount()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTotalamount', []);

        return parent::getTotalamount();
    }

    /**
     * {@inheritDoc}
     */
    public function setTaxes($taxes)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTaxes', [$taxes]);

        return parent::setTaxes($taxes);
    }

    /**
     * {@inheritDoc}
     */
    public function getTaxes()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTaxes', []);

        return parent::getTaxes();
    }

    /**
     * {@inheritDoc}
     */
    public function getIdorder()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getIdorder();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIdorder', []);

        return parent::getIdorder();
    }

    /**
     * {@inheritDoc}
     */
    public function setIduser(\Remmy\BackOfficeBundle\Entity\FosUser $iduser = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIduser', [$iduser]);

        return parent::setIduser($iduser);
    }

    /**
     * {@inheritDoc}
     */
    public function getIduser()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIduser', []);

        return parent::getIduser();
    }

}
