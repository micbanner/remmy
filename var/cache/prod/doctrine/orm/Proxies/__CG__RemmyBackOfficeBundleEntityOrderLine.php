<?php

namespace Proxies\__CG__\Remmy\BackOfficeBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class OrderLine extends \Remmy\BackOfficeBundle\Entity\OrderLine implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'Remmy\\BackOfficeBundle\\Entity\\OrderLine' . "\0" . 'idorderline', '' . "\0" . 'Remmy\\BackOfficeBundle\\Entity\\OrderLine' . "\0" . 'quantity', '' . "\0" . 'Remmy\\BackOfficeBundle\\Entity\\OrderLine' . "\0" . 'unitprice', '' . "\0" . 'Remmy\\BackOfficeBundle\\Entity\\OrderLine' . "\0" . 'totalprice', '' . "\0" . 'Remmy\\BackOfficeBundle\\Entity\\OrderLine' . "\0" . 'taxable', '' . "\0" . 'Remmy\\BackOfficeBundle\\Entity\\OrderLine' . "\0" . 'taxeamount', '' . "\0" . 'Remmy\\BackOfficeBundle\\Entity\\OrderLine' . "\0" . 'idcolor', '' . "\0" . 'Remmy\\BackOfficeBundle\\Entity\\OrderLine' . "\0" . 'idproduct', '' . "\0" . 'Remmy\\BackOfficeBundle\\Entity\\OrderLine' . "\0" . 'idsize', '' . "\0" . 'Remmy\\BackOfficeBundle\\Entity\\OrderLine' . "\0" . 'idorder'];
        }

        return ['__isInitialized__', '' . "\0" . 'Remmy\\BackOfficeBundle\\Entity\\OrderLine' . "\0" . 'idorderline', '' . "\0" . 'Remmy\\BackOfficeBundle\\Entity\\OrderLine' . "\0" . 'quantity', '' . "\0" . 'Remmy\\BackOfficeBundle\\Entity\\OrderLine' . "\0" . 'unitprice', '' . "\0" . 'Remmy\\BackOfficeBundle\\Entity\\OrderLine' . "\0" . 'totalprice', '' . "\0" . 'Remmy\\BackOfficeBundle\\Entity\\OrderLine' . "\0" . 'taxable', '' . "\0" . 'Remmy\\BackOfficeBundle\\Entity\\OrderLine' . "\0" . 'taxeamount', '' . "\0" . 'Remmy\\BackOfficeBundle\\Entity\\OrderLine' . "\0" . 'idcolor', '' . "\0" . 'Remmy\\BackOfficeBundle\\Entity\\OrderLine' . "\0" . 'idproduct', '' . "\0" . 'Remmy\\BackOfficeBundle\\Entity\\OrderLine' . "\0" . 'idsize', '' . "\0" . 'Remmy\\BackOfficeBundle\\Entity\\OrderLine' . "\0" . 'idorder'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (OrderLine $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getIdorderline()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getIdorderline();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIdorderline', []);

        return parent::getIdorderline();
    }

    /**
     * {@inheritDoc}
     */
    public function setQuantity($quantity)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setQuantity', [$quantity]);

        return parent::setQuantity($quantity);
    }

    /**
     * {@inheritDoc}
     */
    public function getQuantity()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getQuantity', []);

        return parent::getQuantity();
    }

    /**
     * {@inheritDoc}
     */
    public function setUnitprice($unitprice)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUnitprice', [$unitprice]);

        return parent::setUnitprice($unitprice);
    }

    /**
     * {@inheritDoc}
     */
    public function getUnitprice()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUnitprice', []);

        return parent::getUnitprice();
    }

    /**
     * {@inheritDoc}
     */
    public function setTotalprice($totalprice)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTotalprice', [$totalprice]);

        return parent::setTotalprice($totalprice);
    }

    /**
     * {@inheritDoc}
     */
    public function getTotalprice()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTotalprice', []);

        return parent::getTotalprice();
    }

    /**
     * {@inheritDoc}
     */
    public function setTaxable($taxable)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTaxable', [$taxable]);

        return parent::setTaxable($taxable);
    }

    /**
     * {@inheritDoc}
     */
    public function getTaxable()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTaxable', []);

        return parent::getTaxable();
    }

    /**
     * {@inheritDoc}
     */
    public function setTaxeamount($taxeamount)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTaxeamount', [$taxeamount]);

        return parent::setTaxeamount($taxeamount);
    }

    /**
     * {@inheritDoc}
     */
    public function getTaxeamount()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTaxeamount', []);

        return parent::getTaxeamount();
    }

    /**
     * {@inheritDoc}
     */
    public function setIdcolor(\Remmy\BackOfficeBundle\Entity\Color $idcolor = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIdcolor', [$idcolor]);

        return parent::setIdcolor($idcolor);
    }

    /**
     * {@inheritDoc}
     */
    public function getIdcolor()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIdcolor', []);

        return parent::getIdcolor();
    }

    /**
     * {@inheritDoc}
     */
    public function setIdproduct(\Remmy\BackOfficeBundle\Entity\Product $idproduct = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIdproduct', [$idproduct]);

        return parent::setIdproduct($idproduct);
    }

    /**
     * {@inheritDoc}
     */
    public function getIdproduct()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIdproduct', []);

        return parent::getIdproduct();
    }

    /**
     * {@inheritDoc}
     */
    public function setIdsize(\Remmy\BackOfficeBundle\Entity\Size $idsize = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIdsize', [$idsize]);

        return parent::setIdsize($idsize);
    }

    /**
     * {@inheritDoc}
     */
    public function getIdsize()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIdsize', []);

        return parent::getIdsize();
    }

    /**
     * {@inheritDoc}
     */
    public function setIdorder(\Remmy\BackOfficeBundle\Entity\OrderHeader $idorder = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIdorder', [$idorder]);

        return parent::setIdorder($idorder);
    }

    /**
     * {@inheritDoc}
     */
    public function getIdorder()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIdorder', []);

        return parent::getIdorder();
    }

}
